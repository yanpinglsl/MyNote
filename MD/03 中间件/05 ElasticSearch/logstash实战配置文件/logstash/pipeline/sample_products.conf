input {
   jdbc {
      # 指定JDBC连接MySQL驱动程序库
      jdbc_driver_library => "/opt/jdbc/mysql-connector-j-8.3.0.jar"
      # MySQL驱动类
      jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
      # 数据库连接字符串
      jdbc_connection_string => "jdbc:mysql://mysql:3306/sample?allowPublicKeyRetrieval=true&useSSL=false"
      # 数据库用户名
      jdbc_user => "root"
      # 数据库密码
      jdbc_password => "123456"
      # 是否启用分页，建议启用，配合分页大小限制每次查询数据量，避免数据量过大引起超时
      jdbc_paging_enabled => "true"
      # 分页大小，根据时间间隔设置一个合理的值
      jdbc_page_size => "500"
      # 指定跟踪列，会根据这个列来查询最新数据
      tracking_column => "update_time"
      # 跟踪列类型，默认是numeric。
      tracking_column_type => "timestamp"
      # 是否需要持久化跟踪列的值。当参数设置成true时，会持久化tracking_column参数所指定的列的最新的值，并在下一次管道执行时通过该列的值来判断需要更新的记录。
      use_column_value => "true"
      # 指定要运行的SQL语句，查询出来的数据会更新到es，:sql_last_value 表示记录的上次运行时跟踪列的最新值，筛选的数据区间为 update_time 大于上次时间，小于最新时间
      statement => "SELECT * FROM products WHERE update_time > :sql_last_value AND update_time < NOW()"
      # 定时运行SQL语句的时间表，采用 Cron 时间格式，这里设置为每分钟运行一次
      schedule => "* * * * *"
  }
}

output {
    elasticsearch {
        # 配置ES集群地址，logstash 同样可以运行在docker中，所以这里可以通过容器名称连接es
        hosts => ["es01:9200"]
        # 索引名称（必须小写）
        index => "sample_products"
        # 用户名
        # user => ""
        # 密码
        # password => ""
        # 数据唯一索引，一般使用主键 id
        document_id => "%{id}"
    }
   stdout {
      codec => json_lines
   }
}